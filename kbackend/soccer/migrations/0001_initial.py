# Generated by Django 3.1 on 2020-08-17 20:41

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('competition_type', models.CharField(choices=[('league', 'League'), ('tournament', 'Tournament'), ('championship', 'Championship')], help_text='\nLeague has a standings table and results in a ranking\nTournament has a bracket and results in a single champion\nChampionship starts as a League and ends with a tournament of the top teams\n', max_length=16)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('description', models.CharField(max_length=256)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeaderboardPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sl_username', models.CharField(help_text='Format: "firstname.lastname", all lower case, modern accounts have only firstname\n          Should be possible to connect to a registered player - later when we do have registration.', max_length=63, unique=True)),
                ('display_name', models.CharField(blank=True, max_length=31)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SoccerField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('photo_url', models.URLField(help_text='Admins can upload files to the kSoccer dropbox account and link them')),
                ('sl_url', models.URLField(blank=True, help_text='Remove this field if the field no longer exists')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('description', models.CharField(max_length=256)),
                ('is_active', models.BooleanField(default=True)),
                ('competitions', models.ManyToManyField(to='soccer.Competition')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stat_type', models.CharField(choices=[('goal', 'Goal'), ('yellow', 'Yellow Card'), ('red', 'Red Card'), ('sub off', 'Substitute Off'), ('sub on', 'Substitute On')], max_length=16)),
                ('time', models.TimeField(null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='soccer.match')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='soccer.leaderboardplayer')),
                ('team', models.ForeignKey(help_text='Storing both team and player because the player can switch teams and also makes queries easier', on_delete=django.db.models.deletion.CASCADE, to='soccer.team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='match',
            name='away_team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='away_team', to='soccer.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='home_team',
            field=models.ForeignKey(help_text='Can be null for a scheduled match in a tournament (opponent is TBD)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='home_team', to='soccer.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='soccer_field',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='soccer.soccerfield'),
        ),
    ]
